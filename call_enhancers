#! /bin/bash

usage() {
cat << EOF
Pipeline for calling and filtering TSS-distal ATAC-seq peaks overlapping an enhancer prediction by CRUP

Usage: prun mdl ${0##*/} -b BAM_DIR -s SAMPLES -g GENOME_BUILD [optional: -t TRANSCRIPTS -m MERGE_REPS -k PEAK_CALLER -c CRUP_CUTOFF -o OUTDIR -f FORCE_RUN -p NTHREADS -n DRY_RUN]

required:
	-d BAM_DIR	   Path to the directory containing the bam files
	-s SAMPLES	   Sample description, e.g. FL_E105_mm10_WT. Either single sample, comma-separated list of samples, or "all" for all samples in the BAM_DIR.
	-g GENOME_BUILD	   Genome build, e.g. mm10

optional:
	-t TRANSCRIPTS	   Bed file with annotated transcripts for the given genome for filtering TSS
	-m MERGE_REPS	   merge_bams (default) or intersect_predictions
			   merge_bams: Predict enhancers on merged bam files.
	   		   intersect_predictions: Predict enhancers separately on replicates and take the intersection of the final enhancer predictions.
	-p PEAK_CALLER	   genrich (default) or macs2
	-P P-VALUE	   p-value for the peak-caller. Default: 0.05
	-c CRUP_CUTOFF	   Default: 0.3
	-o OUTDIR	   Path to the output directory
	-a ATAC_ONLY   	   Only call ATAC-seq peaks
	-b MERGED_BIGWIG	   Produce bigwigs of merged bams (ATAC_ONLY mode)
	-f FORCE	   Force execution and overwriting existing files. Possible values: none (default) | space-separated rule names | all
	-@ NTHREADS   	   Number of parallel threads
        -n DRY_RUN	   Flag for a dry run, i.e. only print the commands instead of executing.
	-B BETA		   Use currently developed Snakefile (for testing purposes only)
	-! SNAKEMAKE_ARGS  Optional arguments for Snakemake in quotes, i.e. -s "--debug-dag --unlock -p"
EOF
}

# parse arguments (more info at https://ndench.github.io/bash/parsing-bash-flags)
transcripts="UCSC"
merge_reps="merge_bams"
peak_caller=genrich
pval=0.05
crup_cutoff=0.3 # lowered to be more permissive, justified by the additional requirement of an ATAC-seq peak
outdir=$(realpath .)
atac_only=False
merged_bigwig=False
force="none"
nthreads="--cores 1"
snakefile="/project/process_seq_data/bin/enhancer_calling/Snakefile_release"
snakemake_args="-pk --rerun-incomplete"

while getopts ":d:s:g:t:m:p:P:c:o:f:@:!:abnB" OPTION; do
 	case $OPTION in
		d) bam_dir=$(realpath $OPTARG) ;;
		s) samples=$OPTARG ;;
		g) build=$OPTARG ;;
		t) transcripts=$OPTARG ;;
		m) merge_reps=$OPTARG ;;
		p) peak_caller=$OPTARG ;;
		P) pval=$OPTARG ;;
		c) crup_cutoff=$OPTARG ;;
		o) outdir=$OPTARG ;;
		a) atac_only=True ;;
		b) merged_bigwig=True ;;
		f) force=$OPTARG ;;
		@) nthreads="--cores $OPTARG" ;;
		n) nthreads="-nr" ;;
		B) snakefile="/project/process_seq_data/bin/enhancer_calling/Snakefile" ;;
		!) snakemake_args="$snakemake_args $OPTARG" ;;
		?) usage; exit 1 ;;
 	esac
done

# throw error if not all mandatory arguments are passed
if [ -z ${bam_dir+x} ] || [ -z ${samples+x} ] || [ -z ${build} ] ; then usage && exit 1; fi
if [[ $peak_caller != 'genrich' && $peak_caller != 'macs2' ]]; then echo "Usage: Optional argument -k PEAK_CALLER must be macs2 or genrich" && exit 1; fi
if [[ $merge_reps != 'intersect_predictions' && $merge_reps != 'merge_bams' ]]; then echo "Usage: Optional argument -m MERGE_REPS must be intersect_predictions or merge_bams" && exit 1; fi
if [[ ! -d $bam_dir ]]; then echo "Error: bam_dir not found"; exit 1; fi

# define which rules to force run
if [[ $force == "all" ]]; then
	force_flag="--forceall"
elif [[ $force == "none" ]]; then
	force_flag=""
else
	force_flag="--forcerun $force"
fi

# define command
cmd="""
snakemake \
	--snakefile $snakefile \
	--config \
	bam_dir=$bam_dir \
	samples=$samples \
	build=$build \
	transcripts=$transcripts \
	merge_reps=$merge_reps \
	peak_caller=$peak_caller \
	pval=$pval \
	crup_cutoff=$crup_cutoff \
	outdir=$outdir \
	atac_only=$atac_only \
	merged_bigwig=$merged_bigwig \
	$force_flag \
	$snakemake_args \
	$nthreads
"""

# print command during dry run
if [[ $nthreads == '-nr' ]]; then
	echo $cmd
fi

# run snakefile
eval $cmd
