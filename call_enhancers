#! /usr/bin/make -f

define arg_msg
"""

Mandatory arguments:
bam_dir: path to the bam files
sample: e.g. FL_E105_mm10_WT
genome_build: e.g. mm10
nrep: Number of biological replicates, e.g. 2.
sequencing_type: single or paired

Optional arguments:
outdir: Output directory
mergebams: Predict enhancers on merged bam files instead of combining replicates at the end. Default: False
peak_caller: genrich (default) or macs2
pval: p-value for ATAC-seq peak caller. Default: 0.05
transcripts: bed-file with annotated transcripts for the given genome for filtering TSS
crup_cutoff: Default 0.5
nthreads: Number of parallel threads to use for CRUP and eHMM. Default 1
"""
endef

# print argument summary block
$(info Argument summary)

ifndef bam_dir
$(error bam_dir is not set. $(arg_msg))
else
$(info bam_dir: $(realpath $(bam_dir)))
endif

ifndef sample
$(error sample is not set. $(arg_msg))
else
$(info sample: $(sample))
endif

ifndef genome_build
$(error genome_build is not set. $(arg_msg))
else
$(info genome_build: $(genome_build))
endif

ifndef nrep
$(error nrep not set. $(arg_msg))
else
$(info nrep: $(nrep))
endif

ifneq ($(shell [[ $(sequencing_type) == single || $(sequencing_type) == paired ]] && echo true ),true)
$(error sequencing_type must be one of [single,paired])
endif

ifndef sequencing_type
$(error sequencing_type is not set. $(arg_msg))
else
$(info sequencing_type: $(sequencing_type))
endif

ifndef outdir
outdir=$(realpath .)
endif
$(info outdir: $(outdir))

ifndef mergebams
mergebams=False
endif
$(info Merge bam files: $(mergebams))

ifndef peak_caller
peak_caller=genrich
endif
$(info peak_caller: $(peak_caller))

ifneq ($(shell [[ $(peak_caller) == genrich || $(peak_caller) == macs2 ]] && echo true ),true)
$(error peak_caller must be one of [genrich,macs2])
endif

ifndef pval
pval=0.05
endif
$(info pval: $(pval))

ifndef transcripts
transcripts=UCSC
$(info transcripts: Not set. Will try to download TSS from UCSC and use promoter predictions to identify TSS-distal enhancers.)
else
$(info transcripts: $(transcripts))
endif

ifndef crup_cutoff
crup_cutoff=0.5
endif
$(info crup_cutoff: $(crup_cutoff))

ifndef nthreads
nthreads=1
endif
$(info nthreads: $(nthreads))

# print new block with commands
define linebreak


endef
$(info $(linebreak)Start computing)

# define variables
crup_dir=$(outdir)/crup
atac_peaks_dir=$(outdir)/atac_peaks
promoter_dir=$(outdir)/promoter
fai=/project/MDL_ChIPseq/data/genome/fasta/$(genome_build).fa.fai
sizes=/project/MDL_ChIPseq/data/genome/assembly/$(genome_build).sizes

# define targets
ifeq ($(mergebams),True)
final_enhancers = $(outdir)/$(sample)_merged.enhancers.bed
stats = $(outdir)/$(sample)_merged.enhancers.stats.pdf
enhancers_rep = $(outdir)/$(sample)_merged.enhancers.filtered.bed

else
enhancers_rep = $(foreach rep, $(shell seq 1 $(nrep)), $(outdir)/$(sample)_Rep$(rep).enhancers.filtered.bed)
final_enhancers = $(outdir)/$(sample).enhancers.bed
stats = $(outdir)/$(sample).enhancers.stats.pdf
endif

targets = $(final_enhancers) $(stats) $(enhancers_rep)

# ------------------------------------------------------------------

all: $(targets)
	echo $(targets)

# ------------------------------------------------------------------

# combine replicate predictions
$(final_enhancers): $(enhancers_rep)
	prun mdl enhancer_combine_replicates.R $@ $(nrep) $^
	prun mdl cite crup ehmm $(peak_caller) | tee cite.txt

# plot stats
$(stats): $(final_enhancers) $(enhancers_rep)
	enhancer_stats.R $@ $(nrep) $(transcripts)

# ------------------------------------------------------------------
.DELETE_ON_ERROR:
.SECONDARY:

# ------------------------------------------------------------------

# create data table per replicate
%data_table.txt:
	mkdir -p $(dir $@)
	prun mdl create_crup_datatable $(shell basename $(dir $@)) $(realpath $(bam_dir)) $@

# normalize data for CRUP
%data_matrix.rds: %data_table.txt
	prun mdl CRUP.R -N -I -x $(nthreads) -g $(fai) -s $(sequencing_type) -i $<
	mv $(patsubst %.txt,%.data_matrix.rds,$<) $@

# call enhancers with CRUP
%.enhancers.crup.bed: %/data_matrix.rds
	mkdir -p $(patsubst %.enhancers.crup.bed,%,$@)
	prun mdl CRUP.R -P -m $< -u $(crup_cutoff) -o $(patsubst %.enhancers.crup.bed,%,$@)
	ln -sr $(patsubst %.enhancers.crup.bed,%/singleEnh.bedGraph,$@) $@

# call ATAC peaks
%.atac_peaks.bed:
	mkdir -p $(patsubst %.atac_peaks.bed,%,$@)
	prun mdl call_atac_peaks $(peak_caller) $(pval) $(bam_dir) $(patsubst %.atac_peaks.bed,%,$(notdir $@)) $(sizes) $@

# call promoters with eHMM
# the first patsubst in the ehmm command yields the sample and the replicate
%.promoters.bed:
	mkdir -p $(patsubst %.promoters.bed,%,$@)
	prun mdl call_promoters $(patsubst %.promoters.bed,%,$(notdir $@)) $(bam_dir) $(sizes) $(patsubst %.promoters.bed,%,$@)
	ln -sr $(patsubst %.promoters.bed,%/promoterRegions.bed,$@) $@

# filter enhancers (TSS- and promoter-distal ATAC peaks over CRUP predictions)
$(outdir)/$(sample)_%.enhancers.filtered.bed: $(atac_peaks_dir)/$(sample)_%.atac_peaks.bed $(crup_dir)/$(sample)_%.enhancers.crup.bed $(promoter_dir)/$(sample)_%.promoters.bed
	prun mdl enhancer_filter.R $@ $^ $(transcripts) $(genome_build)
